blastp database: SARG full 
 makeblastdb -in 1.SARG_v3.1.2_20220829_Full_database.fasta -dbtype prot -out SARG_DB


prodigal -i /u/scratch/y/yuwei/1F.fasta -o 1F_ORFs.gbk -a 1F_ORFs.faa -p meta
nohup blastp -query /u/scratch/y/yuwei/S1_ORFs.faa -db SARG_DB -out /u/scratch/y/yuwei/ORF_finding/blastp_S1.tsv -evalue 1e-5 -outfmt 6

from Bio import SeqIO
import pandas as pd

# Load BLASTP output
blast_df = pd.read_csv('/u/scratch/y/yuwei/ORF_finding/blastp_S1.tsv',
                       sep='\t', header=None)

blast_df.columns = ['query_id', 'subject_id', 'identity', 'align_len', 'mismatches',
                    'gap_opens', 'q_start', 'q_end', 's_start', 's_end',
                    'evalue', 'bit_score']

# Load query sequences and lengths
fasta_file = '/u/scratch/y/yuwei/ORF_finding/S1_ORFs.faa'
query_lengths = {record.id: len(record.seq) for record in SeqIO.parse(fasta_file, 'fasta')}

# Add query lengths and calculate query coverage
blast_df['query_len'] = blast_df['query_id'].map(query_lengths)
blast_df['query_cov'] = blast_df['align_len'] / blast_df['query_len']

# Apply filtering: identity ≥ 80%, query coverage ≥ 70%
filtered_df = blast_df[(blast_df['identity'] >= 80) &
                       (blast_df['query_cov'] >= 0.7)]

# Save filtered results
filtered_df.to_csv('/u/scratch/y/yuwei/ORF_finding/blastp_S1_filtered.tsv', sep='\t', index=False)

print(f"Filtered results saved. {filtered_df.shape[0]} hits passed filtering criteria.")


#!/u/local/apps/python/3.8.0/bin/python3

import pandas as pd

# Path to input BLASTP filtered results (update path if needed)
blastp_file = "/u/scratch/y/yuwei/ORF_finding/blastp_S1_filtered.tsv"

# Output file for ACC list
output_file = "/u/scratch/y/yuwei/ORF_finding/S1_ACC.txt"

# Load filtered BLASTP output
df = pd.read_csv(blastp_file, sep='\t')

# Extract contig name by removing the last "_<number>" from ORF ID
df['contig_id'] = df['query_id'].str.replace(r'_\d+$', '', regex=True)

# Get unique contig IDs with ARGs
acc_list = df['contig_id'].unique()

# Save ACCs to file
pd.Series(acc_list).to_csv(output_file, index=False, header=False)

print(f"✅ Total ACCs found: {len(acc_list)} and saved to {output_file}")
from Bio import SeqIO

acc_list_file = "/u/scratch/y/yuwei/ORF_finding/S1_ACC.txt"
contigs_fasta = "/u/scratch/y/yuwei/ORF_finding/S1.fa"
output_fasta = "/u/scratch/y/yuwei/ORF_finding/S1_ACC_contigs.fa"

# Load list of ACCs
with open(acc_list_file) as f:
    accs = set(line.strip() for line in f)

# Filter and write matching contigs
with open(output_fasta, "w") as out_handle:
    for record in SeqIO.parse(contigs_fasta, "fasta"):
        if record.id in accs:
            SeqIO.write(record, out_handle, "fasta")
